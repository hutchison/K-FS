\documentclass[
  11pt,
]{scrartcl}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
%\usepackage[]{concrete}

\usepackage[]{parskip}
\usepackage[]{microtype}
\usepackage[
  cm,
  headings
]{fullpage}
\usepackage[ngerman]{babel}

\usepackage[]{amsmath}
\usepackage[]{amssymb}

\usepackage[]{hyperref}
\usepackage[]{enumerate}
\usepackage[]{color}

% Schönere Tabellen
% dazu gibt's neue Kommandos:
% - \toprule[(Dicke)], \midrule[(Dicke)], \bottomrule[(Dicke)]
% - \addlinespace: Extrahöhe zwischen Zeilen
\usepackage{booktabs}

% Ermöglicht Zugriff auf die letzte Seite (z.B. \pageref{LastPage}):
\usepackage{lastpage}

% coole Kopf- und Fußzeilen:
\usepackage{fancyhdr}
% Seitenstil ist natürlich fancy:
\pagestyle{fancy}
% alle Felder löschen:
\fancyhf{}
% Veranstaltung:
%\fancyhead[L]{Komplexität und formale Sprachen}
%\fancyhead[C]{}
%\fancyhead[R]{}
%\fancyfoot[L]{}
%\fancyfoot[C]{\thepage}
\fancyfoot[C]{\thepage\,/\,\pageref{LastPage}}
% Linie oben/unten:
\renewcommand{\headrulewidth}{0.0pt}
\renewcommand{\footrulewidth}{0.0pt}

% Coole Zeichnungen:
\usepackage{tikz}
\usetikzlibrary{%
  %backgrounds,
  %mindmap,
  %shapes.geometric,
  shapes.symbols,
  %shapes.misc,
  %shapes.multipart,
  %positioning,
  %fit,
  %calc,
  arrows,
  %automata,
  %trees,
  %decorations.pathreplacing,
}

% Definitionen und Sätze:
\usepackage[]{amsthm}

\newtheoremstyle{bonny}% schottisch für „ansehnlich“
  {9pt}% measure of space to leave above the theorem. E.g.: 3pt
  {6pt}% measure of space to leave below the theorem. E.g.: 3pt
  {}% name of font to use in the body of the theorem
  {}% measure of space to indent
  {\bfseries}% name of head font
  {\smallskip}% punctuation between head and body
  {\newline}% space after theorem head; " " = normal interword space
  {}% Manually specify head

\theoremstyle{bonny}

\newtheorem{definition}{Definition}
\newtheorem{satz}{Satz}
\newtheorem{beispiel}{Beispiel}
\newtheorem{bemerkung}{Bemerkung}

\newcommand{\N}{\mathbb{N}}
\renewcommand{\O}{\mathcal{O}}
\renewcommand{\ae}{\leq_{\textsf{ae}}}
\newcommand{\p}{\leq_{\textsf{p}}}

\newcommand{\SAT}{\textsf{SAT}}
\newcommand{\NPRIM}{\textsf{NPRIM}}
\newcommand{\SETPACKING}{\textsf{SET PACKING}}
\newcommand{\ZOINTLINPROGRAMMING}{\textsf{0/1-INTEGER LINEAR PROGRAMMING}}
\newcommand{\KNAPSACK}{\textsf{KNAPSACK}}
\newcommand{\CLIQUE}{\textsf{CLIQUE}}
\newcommand{\TSP}{\textsf{TSP}}
\newcommand{\COLOR}{\textsf{COLOR}}
\newcommand{\VERTEXCOVER}{\textsf{VERTEX COVER}}
\newcommand{\HAMILTONCIRCUIT}{\textsf{HAMILTON CIRCUIT}}
\newcommand{\NP}{\textsf{NP}}
\newcommand{\TAKT}{\textsf{TAKT}}
\newcommand{\ADDRESS}{\textsf{ADDRESS}}
\newcommand{\zustand}{\textsf{zustand}}
\newcommand{\position}{\textsf{position}}
\newcommand{\band}{\textsf{band}}

\title{Komplexität und formale Sprachen}
\author{Vorlesung an der Uni Rostock}

\begin{document}

\maketitle

\section*{Worum geht es?}
\label{sec:worum_geht_es_}

\subsection*{Grenzen der Informatik}
\label{sub:grenzen_der_informatik}

\begin{itemize}
  \item Was kann man prinzipiell berechnen und was nicht?
  \item[$\rightarrow$] \emph{Berechenbarkeit}
  \item Was kann man unter Einsatz vernünftiger Ressourcen berechnen und was nur
    mit unvernünftigem Aufwand?
  \item[$\rightarrow$] \emph{Komplexität}
  \item Wie komplex muss ein Regelwerk/eine Maschine sein, um ein Problem (als
    Sprache) zu beschreiben bzw.\ zu lösen?
  \item[$\rightarrow$] \emph{Formale Sprachen}
\end{itemize}

\pagebreak

\section{Komplexität}
\label{sec:komplexit_t}

\subsection{Setting}
\label{sub:setting}

\begin{itemize}
  \item wir betrachten ab jetzt nur \emph{totale} Funktionen
  \item \textbf{Aufwand}
    \begin{itemize}
      \item einer Berechnung (eines Programmlaufs):
        \begin{itemize}
          \item Zeit = Anzahl der Schritte bis Terminierung
          \item Platz = Anzahl der benutzten Zellen
        \end{itemize}
      \item eines Programms (einer Maschine):
        \begin{description}
          \item[worst case] Funktion, die jedem $n$ das Maximum der Aufwände von
            Berechnungen bei Eingaben der Länge $n$ zuordnet.
          \item[average case] … den Durchschnitt …
          \item[best case] … das Minimum …
        \end{description}
      \item eines Problems = \textbf{Komplexität}
        \begin{itemize}
          \item[=] Aufwand des \emph{besten} Programms zur Lösung des Problems
        \end{itemize}
    \end{itemize}
  \item \textbf{Eingabelänge}
    \begin{itemize}
      \item hängt von der Kodierung ab
      \item alles außer unär sehen wir als „vernünftige“ Kodierung an (z.\,B.
        binär, dezimal, hexadezimal)
    \end{itemize}
\end{itemize}

\subsection{Die Wahl der Maschine}
\label{sub:die_wahl_der_maschine}

Betrachten wir zunächst die bekannten Turing-Maschinen. Es stellt sich sofort
die Frage: mit was für einer Turing-Maschine arbeiten wir? Hat sie ein oder
mehrere Bänder? Wie groß ist das Alphabet? Diese Eigenschaften beeinflussen das
Resultat unserer Analyse.

\begin{satz}
  Zu jeder Turing-Maschine $M$, die eine Funktion $f$ mit Platzbedarf $S_M: \N
  \rightarrow \N$ berechnet und jedem $\varepsilon > 0$ existiert eine Maschine
  $M'$, für deren Platzbedarf $S_{M'}$ für fast alle $n$ gilt:
  \begin{align*}
    S_{M'}(n) \leq \lceil \varepsilon \cdot S_M(n) \rceil
  \end{align*}
  \emph{Beweisidee:} $X' = X^n$, d.\,h.\ eine Zelle von $M'$ speichert den
  Inhalt von $n$ Zellen von $M$.

  \emph{Im Klartext:} Wir können den Platzbedarf einer Turing-Maschine beliebig
  verringern, indem wir eine andere Turing-Maschine mit größerem Alphabet
  konstruieren. Diese „verbraucht“ für die neue Berechnung weniger Zellen.
\end{satz}

\begin{satz}
  Zu jeder $k$-Band-Turing-Maschine $M$ mit $k > 1$, die eine Funktion $f$ mit
  Zeitbedarf $T_M: \N \rightarrow \N$ berechnet und jedem $\varepsilon > 0$,
  existiert eine Turing-Maschine $M'$, die $f$ mit Zeitbedarf
  \begin{align*}
    T_{M'}(n) \leq n + \lceil \varepsilon \cdot T_M (n) \rceil + c
  \end{align*}
  abarbeitet.

  \emph{Beweisidee:} Komprimiere Zellen (wie oben) auf 2. Band und fasse alle
  Taktfolgen, bei denen der Kopf innerhalb einer Zellengruppe bleibt, zu einem
  einzigen Takt zusammen.
\end{satz}

\begin{satz}
  Sei $M$ eine Turing-Maschine, die $f$ mit Zeitaufwand $T_M$ und Platzaufwand
  $S_M$ berechnet. Sei $k \in \N$. Dann gibt es eine Turing-Maschine $M'$, die
  $f$ berechnet, wobei
  \begin{itemize}
    \item $T_{M'}(n) =
      \begin{cases}
        n & \text{falls } n \leq k\\
        T_{M}(n) & \text{sonst}
      \end{cases}$
    \item $S_{M'}(n) =
      \begin{cases}
        0 & \text{falls } n \leq k\\
        S_{M}(n) & \text{sonst}
      \end{cases}$
  \end{itemize}

  \emph{Beweisidee:} für Eingaben der Länge $\leq k$ (das sind beschränkt viele)
  kodieren wir eine Tabelle mit vorberechneten Werten direkt ins Programm.
\end{satz}

Fazit: für Komplexitätsbetrachtungen sind:
\begin{itemize}
  \item nicht wichtig: lineare Faktoren
  \item nur wichtig: asymptotisches Verhalten der Aufwandsfunktionen
\end{itemize}

\subsection{O-Notation}
\label{sub:o_notation}

\begin{definition}[$\ae$]
  Seien $f,g: \N \rightarrow \N$. Es gilt $f \ae  g$, falls für fast
  alle $n: f(n) \leq g(n)$ gilt. „Fast alle“ heißt „alle bis auf endlich viele“.
\end{definition}

\begin{definition}[$\O$]
  $\O(f) := \{ g \mid \exists k \in \N \setminus \{ 0 \} : g \ae k \cdot f \}$
\end{definition}

\subsection{Einige Entscheidungsprobleme in \NP}
\label{sub:einige_entscheidungsprobleme_in_np}

\begin{itemize}
  \item \SAT{}: Zu gegebenem Ausdruck der Aussagenlogik (in konjunktiver
    Normalform) ist seine Erfüllbarkeit zu entscheiden
    \begin{itemize}
      \item „Rate“ Belegung der Variablen
      \item prüfe deterministisch
    \end{itemize}

  \item \NPRIM{}: Zu gegebener nat. Zahl > 1 ist zu entscheiden, ob sie echte
    Teiler besitzt
    \begin{itemize}
      \item „Rate“ Teiler
      \item prüfe deterministisch
    \end{itemize}

  \item \SETPACKING{}: Gegeben sei die Menge $M$ und $n$ Teilmengen
    $M_1, \ldots, M_n$ und die Zahl $k$.

    Gibt es unter den gegebenen Teilmengen $k$ paarweise disjunkte?
    \begin{itemize}
      \item Rate sie \ldots
    \end{itemize}

  \item \ZOINTLINPROGRAMMING{}: Gegeben seien Ungleichungen, eine Zielfunktion
    $f$ in $n$ Variablen $x_1, \ldots, x_n$, sowie eine Zahl $k$.

    Gibt es eine Zuordnung von den Werten $0$ bzw. $1$ für die $x_i$ derart,
    dass $f(x_1, \ldots, x_n) \geq k$?

  \item \KNAPSACK{}: Gegeben sei eine Menge, die für jedes Element das Gewicht
    und den Wert enthält, und die Zahlen $G$ und $W$.

    Gibt es eine Teilmenge, deren Gewichtssumme $\leq G$ und Wertsumme $\geq W$
    ist?

  \item \CLIQUE{}: Gegeben sei ein ungerichteter Graph $(V,E)$ und eine Zahl
    $k$.

    Gibt es eine Knotenmenge $V' \subseteq V$ mit $|V'| \geq k$ und $V' \times
    V' \in E$?

  \item \TSP{}: Gegeben sei ein vollständiger Graph $(V, E = V \times V)$ mit
    einer Kostenfunktion $c: E \rightarrow \N$ sowie eine Zahl $k$.

    Gibt es eine Rundreise in $(V, E)$, die billiger als $k$ ist?

  \item \COLOR{}: Gegeben sei ein ungerichteter Graph $(V, E)$ und eine Zahl
    $k$.

    Kann man die Knoten mit $k$ Farben so färben, dass benachbarte Knoten immer
    verschiedene Farben haben?

  \item \VERTEXCOVER{}: Gegeben sei ein ungerichteter Graph $(V, E)$ und eine
    Zahl $k$.

    Gibt es eine Teilmenge $V'$ mit $|V'| \leq k$ derart, dass jede Kante mit
    einem Knoten aus $V$ verbunden ist?

  \item \HAMILTONCIRCUIT{}: Gegeben sei ein ungerichteter Graph.

    Gibt es einen Kreis, der alle Knoten durchläuft?
\end{itemize}

\begin{definition}[Polynomialzeitreduktion]
  Seien $L_1 \subseteq \Sigma_1^*$ und $L_2 \subseteq \Sigma_2^*$ Sprachen (bzw.
  Entscheidungsprobleme), dann ist
  \begin{align*}
    L_1 & \p L_2 & \text{($L_1$ ist auf $L_2$ polynomiell reduzierbar)}
  \end{align*}
  wenn es eine in polynomieller Zeit berechenbare Funktion
  $f: \Sigma_1^* \rightarrow \Sigma_2^*$
  (also eine Turingmaschine, die in polynomieller Zeit terminiert) gibt,
  so dass für alle Wörter
  $w \in \Sigma_1^*$
  die Äquivalenz
  \begin{align*}
    w \in L_1 \Leftrightarrow f(w) \in L_2
  \end{align*}
  gilt.
\end{definition}

\begin{definition}[\NP-schwer]
  Eine Sprache $L$ ist \NP-schwer, wenn für alle $L' \in \NP$
  \begin{align*}
    L' \p L
  \end{align*}
  gilt.
\end{definition}

\begin{definition}[\NP-vollständig]
  Ein Entscheidungsproblem $L$ heißt \NP-vollständig, wenn
  \begin{itemize}
    \item $L \in \NP$
    \item $L$ ist \NP-schwer, also jedes Problem aus \NP{} lässt sich in
      Polynomialzeit auf $L$ reduzieren ($\forall L' \in \NP{}: L' \p L$).
  \end{itemize}
\end{definition}

\begin{satz}[Satz von Cook: \SAT{} ist \NP{}-vollständig]
  Teil 1: $\SAT \in \NP$:
  \begin{itemize}
    \item „Rate“ Belegung und rechne den Wert des Ausdrucks aus
    \item dies braucht $\O(n)$ Schritte, wenn $n$ die Anzahl der Symbole ist,
      aus denen der Ausdruck aufgebaut ist
  \end{itemize}
  Teil 2: $\SAT$ ist $\NP$-schwer
  \begin{itemize}
    \item Gegeben: irgendein $\NP$-Problem, also eine nichtdet. Turingmaschine
      $M$ und ein Polynom $p$, das $T_M$ beschränkt.
    \item Wir bilden zur Eingabe $x$ für $M$ in Polynomialzeit einen
      aussagenlogischen Ausdruck $\phi$, der die Arbeit von $M$ derart
      nachbildet, dass $\phi$ genau dann erfüllbar ist, wenn ein Lauf von $M$
      existiert, der mit Ergebnis $1$ terminiert.
    \item Wir nutzen dabei: $M$ läuft auf $x$ maximal $p(|x|)$ Takte und $p$
      ist effizient berechenbar.
  \end{itemize}
  \begin{proof}
    \begin{itemize}
      \item Wir betrachten Indizes aus folgenden Indexmengen:
        \begin{itemize}
          \item $x \in \Gamma$: das verwendete Bandalphabet der Maschine; die
            Größe ist unabhängig von der Eingabelänge
          \item $z \in Z$: die verwendete Zustandsmenge der Maschine; die Größe
            ist unabhängig von der Eingabelänge
          \item $t \in \TAKT: \{0, \dots, p(n)\}$, polynomielle Größe in
            Abhängigkeit von der Eingabelänge $n$
          \item $a \in \ADDRESS: \{ -p(n), \dots, 0, \dots, p(n) \}$
            polynomielle Größe abhängig von der Eingabelänge
        \end{itemize}
      \item Wir betrachten Aussagenvariablen mit folgendem Verwendungszweck:
        \begin{itemize}
          \item $z_{tz}: [\zustand(t) = z]$ nach $t$ Takten ist $M$ im Zustand
            $z$
          \item $y_{ta}: [\position(t) = a]$ nach $t$ Takten steht der Kopf auf
            Zelle $a$
          \item $x_{tax}: [\band(t, a) = x]$ nach $t$ Takten enthält Zelle $a$
            den Wert $x$
        \end{itemize}
      \item Konstruierte Formel:
        $\textsf{A} \wedge \textsf{Ü} \wedge \textsf{E} \wedge \textsf{R}$
        \begin{itemize}
          \item $\textsf{A}$: Anfangsbedingung, beschreibt Startkonfiguration
          \item $\textsf{Ü}$: Übergangsfunktion, beschreibt Konfigurationswechsel
          \item $\textsf{E}$: Endbedingung, beschreibt Endkonfiguration
          \item $\textsf{R}$: Randbedingung, schließt ungewollte Lösungen aus
        \end{itemize}
        Zu \textsf{A} (Anfangsbedingung): Für Eingabe $x_1, \dots, x_n$
        \begin{center}
          \begin{tabular}{ll}
            $z_{00}\ \wedge$
              & \dots Zustand nach $0$ Takten ist $z_0$\\
            $y_{00}\ \wedge$
              & \dots Kopfposition nach $0$ Takten ist $0$\\
            $\bigwedge\limits_{a = 1 \dots n} x_{0, a-1, xa}\ \wedge$
              & \dots Eingabe nach $0$ Takten auf dem Band\\
            $\bigwedge\limits_{-p(n) \leq a \leq 0 \ \vee \ n+1 \leq a \leq p(n)} x_{0, a-1, \Box}\ \wedge$
              & \dots restliches Band ist leer\\
          \end{tabular}
        \end{center}
        Länge von \textsf{A}: $2p(n) + 3$; Konstruktion effizient realisierbar

        Zu \textsf{Ü} (Übergangsrelation): für
        $d(z,x) = \emptyset$
        wird
        $d(z,x) = \{(z, x, 0)\}$
        gesetzt (Terminierung auf Zeitpunkt $p(n)$ verschoben)

        \begin{center}
          \begin{tabular}{ll}
            $\Big(
              \bigwedge\limits_{0 \leq t < p(n), -p(n) \leq a \leq p(n), z, x}
              \big( ( z_{tz} \ \wedge \ y_{ta} \ \wedge \ x_{tax} )$
              & \dots aktuelle Konfiguration\\
            $\Rightarrow
              \bigvee\limits_{(z', x', b) \in \delta(z,x)}
              (z_{t+1, z'} \ \wedge \ y_{t+1, a+b} \ \wedge \ x_{t+1, a, x'})
              \big)
              \Big)$
              & \dots Folgekonfiguration\\
            $\wedge\ \bigwedge_{0 \leq t < p(n), -p(n) \leq a \leq p(n), x}
              (\neg y_{ta} \ \wedge \ x_{tax}) \Rightarrow x_{t+1, a, x}$
              & \dots keine Änderung woanders
          \end{tabular}
        \end{center}
        Länge von \textsf{Ü} etwa $2 |X| |Z| {p(n)}^2 + 3 |X| |Z| + 6 |X| {p(n)}^2$;
        Konstruktion effizient realisierbar

        Zu \textsf{E} (Endbedingung):
        \begin{center}
          \begin{tabular}{ll}
            $z_{p(n), zf} \ \wedge$ & \dots Maschine im Endzustand\\
            $\bigwedge\limits_{-p(n) \leq a \leq p(n)} y_{p(n), a}
              \Rightarrow
              ( x_{p(n), a+1, 1}
              \ \wedge \
              x_{p(n), a+2, \Box}
              \ \wedge \
              x_{p(n), a, \Box} )$
              & \dots am Kopf steht Ergebnis $1$
          \end{tabular}
        \end{center}
        Länge von \textsf{E} etwa $8p(n)$; Konstruktion effizient realisierbar

        Zu \textsf{R} (Randbedingung):
        \begin{center}
          \begin{tabular}{ll}
            $\bigwedge\limits_{0 \leq t \leq p(n)}
              \bigvee\limits_z z_{tz} \ \wedge
              \bigwedge\limits_{z' \neq z} \neg z_{tz'} \ \wedge$
              & \dots die Maschine ist immer in genau einem Zustand\\
            $\bigwedge\limits_{0 \leq t \leq p(n)}
              \bigvee\limits_{-p(n) \leq a \leq p(n)} y_{ta} \ \wedge
              \bigwedge\limits_{a' \neq a} \neg z_{ta'} \ \wedge$
              & \dots der Kopf befindet sich immer an genau einer Position\\
            $\bigwedge\limits_{0 \leq t \leq p(n)}
              \bigwedge\limits_{-p(n) \leq a \leq p(n)}
              \bigvee\limits_x x_{tax} \ \wedge
              \ \bigwedge\limits{x' \neq x} \neg x_{tax'}$
              & \dots in jeder Zelle befindet sich immer genau ein Zeichen
          \end{tabular}
        \end{center}
        Länge von \textsf{R} etwa $|Z|^2 p(n) + 4 {p(n)}^3 + 2 |X|^2 {p(n)}^2$;
        Konstruktion effizient realisierbar
    \end{itemize}
    Rest des Beweises:
    \begin{enumerate}[(a)]
      \item Falls ein Lauf der Maschine existiert, der mit $1$ terminiert, dann
        liefert dieser Lauf auf naheliegende Weise eine erfüllende Belegung der
        konstruierten Formel.
      \item Falls die konstruierte Formel erfüllbar ist, dann kann man aus der
        erfüllenden Belegung einen akzeptierenden Lauf der Maschine ableiten
        (\textsf{R} dabei wichtig).
    \end{enumerate}
    Also ist der Ausdruck genau dann erfüllbar, wenn die Maschine auf
    betrachteter Eingabe hält. Außerdem ist die Konstruktion in
    $\O\left({p(n)}^3\right)$
    möglich.
  \end{proof}
\end{satz}

\begin{satz}[$\SAT \p \CLIQUE$]
\end{satz}

\pagebreak

\section{Formale Sprachen}
\label{sec:formale_sprachen}

\subsection{Grundlagen}
\label{sub:grundlagen}

\begin{description}
  \item[Alphabet $X$] eine endliche nicht leere Menge
    $X = \{x_1, \ldots, x_n \}$.
  \item[Wort $w$] eine endliche Folge von Buchstaben
    $w: \{0, \ldots, n-1\} \rightarrow X$
  \item[Wortlänge $|w|$] Anzahl der Buchstaben $n$
  \item[Wortmenge $X^*$] die Menge aller Wörter über dem Alphabet $X$
  \item[Sprache $L$] eine Menge von Wörtern über $X$: $L \subseteq X^*$
  \item[Satz von $L$] ein Wort $w \in L$
\end{description}


\end{document}
